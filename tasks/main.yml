---
- name: "Check docker-compose command response"
  register: output_docker
  changed_when: false
  ignore_errors: yes
  ansible.builtin.command: "docker -v"

- name: "Start by install Docker"
  register: output
  changed_when: output.rc != 0
  when: output_docker.rc != 0
  ansible.builtin.shell:
    cmd: set -o pipefail && curl https://releases.rancher.com/install-docker/{{ install_kubernetes_cluster__docker_script_version }}.sh | sh
    executable: /bin/bash

- name: "Init the cluster"
  run_once: yes
  when: install_kubernetes_cluster__is_manager | default(false)
  block:
    - name: "Init the cluster with the command line shell"
      register: output
      changed_when: output.rc != 0
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          set -o pipefail
          curl -sfL https://get.k3s.io | sh -s - server \
          --cluster-init \
          --docker \
          --data-dir "{{ install_kubernetes_cluster__data_dir }}" \
          --cluster-cidr "{{ install_kubernetes_cluster__cluster_cidr }}" \
          --service-cidr "{{ install_kubernetes_cluster__service_cidr }}" \
          --service-node-port-range "{{ install_kubernetes_cluster__service_node_port_range }}" \
          --cluster-dns "{{ install_kubernetes_cluster__cluster_dns }}" \
          {% for tls_san in install_kubernetes_cluster__tls_sans %}
          --tls-san "{{ tls_san }}" \
          {% endfor %}
          --cluster-domain "{{ install_kubernetes_cluster__cluster_domain }}"

    - name: "Check if server is initialized"
      register: result
      until: "result.status == 401"
      retries: 10
      delay: 10
      ansible.builtin.uri:
        url: "https://{{ inventory_hostname }}:6443"
        validate_certs: no
        status_code: [401]

    - name: "Get the join agent token"
      register: token_agent_output
      changed_when: token_agent_output.rc != 0
      ansible.builtin.command:
        cat {{ install_kubernetes_cluster__data_dir }}/server/agent-token

    - name: "Get the join server token"
      register: join_node_token
      changed_when: join_node_token.rc != 0
      ansible.builtin.command:
        cat {{ install_kubernetes_cluster__data_dir }}/server/node-token

    - name: "Set facts"
      ansible.legacy.set_fact:
        join_agent_token: "{{ token_agent_output.stdout }}"
        join_node_token: "{{ join_node_token.stdout }}"
        server_node: "{{ inventory_hostname }}"

- name: "Join the cluster as SERVER"
  when: ((install_kubernetes_cluster__is_manager | default(false)) and (inventory_hostname != server_node ))
  throttle: 1
  block:
    - name: "Join the cluster as SERVER"
      register: output
      changed_when: output.rc != 0
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          curl -sfL https://get.k3s.io | sh -s - server \
          --docker \
          --data-dir "{{ install_kubernetes_cluster__data_dir }}" \
          --cluster-cidr "{{ install_kubernetes_cluster__cluster_cidr }}" \
          --service-cidr "{{ install_kubernetes_cluster__service_cidr }}" \
          --service-node-port-range "{{ install_kubernetes_cluster__service_node_port_range }}" \
          --cluster-dns "{{ install_kubernetes_cluster__cluster_dns }}" \
          --cluster-domain "{{ install_kubernetes_cluster__cluster_domain }}" \
          --server "https://{{ server_node }}:6443" \
          --token "{{ join_node_token }}"

- name: "Join the cluster as AGENT"
  when: not (install_kubernetes_cluster__is_manager | default(false))
  throttle: 1
  block:
    - name: "Join the cluster as AGENT"
      register: output
      changed_when: output.rc != 0
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          curl -sfL https://get.k3s.io | sh -s - agent \
          --docker \
          --data-dir "{{ install_kubernetes_cluster__data_dir }}" \
          --server "https://{{ server_node }}:6443" \
          --token "{{ join_agent_token }}"

- name: "Install Helm"
  when: install_kubernetes_cluster__is_manager | default(false)
  block:
    - name: "Get the kubeconfig from first server"
      when: inventory_hostname == server_node
      ansible.builtin.fetch:
        src: "/etc/rancher/k3s/k3s.yaml"
        dest: "/tmp/.ansible/install_kubernetes_cluster/k3s.yaml"
        flat: yes
        validate_checksum: yes

    - name: "Check if /root/.kube destination exist"
      register: kube_dest_stat
      ansible.builtin.stat:
        path: "/root/.kube"

    - name: "Create /root/.kube destination"
      when: not kube_dest_stat.stat.exists
      ansible.builtin.file:
        path: "/root/.kube"
        state: directory
        recurse: yes
        owner: "root"
        group: "root"
        mode: "0600"

    - name: "Import k3s.yaml"
      ansible.builtin.copy:
        dest: "/root/.kube/config"
        src: "/tmp/.ansible/install_kubernetes_cluster/k3s.yaml"
        owner: "root"
        group: "root"
        mode: "0600"

    - name: "Install Helm"
      register: output
      changed_when: output.rc != 0
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          set -o pipefail
          curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

- name: "Handle controllers"
  when: ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"
  block:
    - name: "Use Portainer as controller"
      when: (install_kubernetes_cluster__is_manager | default(false)) and ((install_kubernetes_cluster__use_portainer | default(false)) and not (install_kubernetes_cluster__use_rancher | default(false)))
      block:
        - name: "Import portainer.yml manifest file"
          ansible.builtin.template:
            src: "templates/portainer.yml.j2"
            dest: "/etc/rancher/portainer.yml"
            owner: "root"
            group: "root"
            mode: "0700"

        - name: "Install Portainer with manifest / kubectl"
          register: output
          changed_when: output.rc != 0
          run_once: yes
          ansible.builtin.shell: |
            kubectl apply -n portainer -f /etc/rancher/portainer.yml

    - name: "Use Rancher as controller"
      when: (install_kubernetes_cluster__is_manager | default(false)) and ((install_kubernetes_cluster__use_rancher | default(false)) and not (install_kubernetes_cluster__use_portainer | default(false)))
      block:
        - name: "Add Rancher repos"
          kubernetes.core.helm_repository:
            name: "rancher-latest"
            repo_url: "https://releases.rancher.com/server-charts/latest"
            force_update: true

        - name: "Add Jetstack repos"
          kubernetes.core.helm_repository:
            name: "jetstack"
            repo_url: "https://charts.jetstack.io"
            force_update: true

        - name: "Create namespace"
          register: output
          changed_when: output.rc != 0
          ignore_errors: yes
          run_once: yes
          ansible.builtin.command: |
            kubectl create namespace cattle-system

        - name: "Create add cert-manager"
          register: output
          changed_when: output.rc != 0
          run_once: yes
          ansible.builtin.command: |
            kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/{{ install_kubernetes_cluster__cert_manager_version }}/cert-manager.crds.yaml

        - name: "Install cert-manager"
          register: output
          changed_when: output.rc != 0
          run_once: yes
          ansible.builtin.command: |
            helm install cert-manager jetstack/cert-manager \
              --namespace cert-manager \
              --create-namespace

        - name: "Deploy Rancher with Helm"
          register: output
          changed_when: output.rc != 0
          run_once: yes
          ansible.builtin.command: |
            helm install rancher rancher-latest/rancher \
              --namespace cattle-system \
              --set hostname="{{ install_kubernetes_cluster__rancher_hostname }}" \
              --set bootstrapPassword="{{ install_kubernetes_cluster__rancher_admin_password }}"
