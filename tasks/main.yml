---
- name: "Prepare host"
  block:
    - name: "Update apt and install required packages"
      ansible.builtin.apt:
        update_cache: true
        name:
        - "apt-transport-https"
        - "ca-certificates"
        - "curl"
        - "gnupg2"
        - "lsb-release"
        - "bridge-utils"

    - name: "Edit system vars"
      loop:
        - "net.bridge.bridge-nf-call-ip6tables"
        - "net.bridge.bridge-nf-call-iptables"
        - "net.ipv4.ip_forward"
      loop_control:
        loop_var: propery
      ansible.posix.sysctl:
        name: "{{ propery }}"
        value: '1'
        sysctl_set: true
        state: present
        reload: true

    - name: "Edit /etc/modules-load.d/containerd.conf"
      loop:
        - "br_netfilter"
        - "overlay"
      loop_control:
        loop_var: line
      ansible.builtin.lineinfile:
        path: "/etc/modules-load.d/containerd.conf"
        line: "{{ line }}"
        create: yes
        insertafter: EOF

    - name: "Edit /etc/sysctl.d/99-kubernetes-cri.conf"
      loop:
        - "net.bridge.bridge-nf-call-iptables = 1"
        - "net.ipv4.ip_forward = 1"
        - "net.bridge.bridge-nf-call-ip6tables = 1"
      loop_control:
        loop_var: line
      ansible.builtin.lineinfile:
        path: "/etc/sysctl.d/99-kubernetes-cri.conf"
        line: "{{ line }}"
        create: yes
        insertafter: EOF

    - name: "Edit system vars"
      register: output
      changed_when: output.rc != 0
      ansible.builtin.shell: |
        modprobe overlay
        modprobe br_netfilter
        sysctl --system

- name: "Install Kubernetes"
  block:
    - name: "Add Kubernetes GPG apt Key"
      ansible.builtin.apt_key:
        url: "https://packages.cloud.google.com/apt/doc/apt-key.gpg"

    - name: "Add Kubernetes Repository"
      ansible.builtin.apt_repository:
        repo: "deb http://apt.kubernetes.io/ kubernetes-xenial main"

    - name: "Update apt and install Kubernetes packages"
      ansible.builtin.apt:
        update_cache: true
        name:
          - "kubelet"
          - "kubeadm"
          - "kubectl"

- name: "Init the master / main / manager"
  when: add_kubernetes_cluster_is_manager | default(false)
  run_once: yes
  block:
    - name: "Init the cluster"
      register: output
      changed_when: output.rc != 0
      ansible.builtin.shell:
        kubeadm init \
        --apiserver-advertise-address={{ add_kubernetes_cluster_advertise_address }} \
        --apiserver-cert-extra-sans={{ add_kubernetes_cluster_cert_sans }} \
        --cert-dir={{ add_kubernetes_cluster_cert_dir }} \
        --node-name={{ add_kubernetes_cluster_node_name }} \
        --pod-network-cidr={{ add_kubernetes_cluster_network_cidr }} \
        --service-cidr={{ add_kubernetes_cluster_service_cidr }} \
        --control-plane-endpoint={{ add_kubernetes_cluster_control_plane_endpoint }} \
        --service-dns-domain={{ add_kubernetes_cluster_service_dns }} \
        --upload-certs

    - name: "Check if master is initialized"
      register: result
      until: "result.status == 403"
      retries: 5
      delay: 5
      ansible.builtin.uri:
        url: "https://{{ add_kubernetes_cluster_advertise_address }}:6443"
        validate_certs: no
        status_code: [403]

    - name: "Add CNI - kuberouter"
      ansible.builtin.shell: |
        kubectl apply -f https://raw.githubusercontent.com/cloudnativelabs/kube-router/master/daemonset/kubeadm-kuberouter.yaml

    - name: "Check if Manager is ready"
      register: output
      retries: 100
      delay: 5
      until: output.stdout_lines | count > 0
      changed_when: output.rc != 0
      ansible.builtin.shell: |
        kubectl get nodes | grep " Ready"

    - name: "Get cert key"
      register: cert_key_output
      ansible.builtin.command: |
        kubeadm init phase upload-certs --upload-certs

    - name: "Get token command"
      register: token_command_output
      ansible.builtin.command: |
        kubeadm token create --print-join-command

    - name: "Set fatcs"
      ansible.legacy.set_fact:
        manager_host: "{{ inventory_hostname }}"
        cert_key: "{{ cert_key_output.stdout_lines[0] }}"
        token_command: "{{ token_command_output.stdout_lines[0] }}"

    - name: "Fetch admin.conf on controller node"
      ansible.builtin.fetch:
        src: "/etc/kubernetes/admin.conf"
        dest: "/tmp/.ansible/add_kubernetes_cluster/admin.conf"
        flat: yes

- name: "Join cluster as Manager"
  when: (add_kubernetes_cluster_is_manager | default(false)) and (inventory_hostname != manager_host))
  block:
    - name: "Create .kube directory"
      ansible.builtin.file:
        path: "/root/.kube"
        state: directory
        owner: "root"
        group: "root"
        mode: "0700"

    - name: "Copy admin.conf to .kube/config"
      ansible.builtin.copy:
        src: "/tmp/.ansible/add_kubernetes_cluster/admin.conf"
        dest: "/root/.kube/config"
        mode: "0700"

    - name: Joinning new Manager to Manager
      ansible.builtin.shell: "{{ token_command }} --control-plane --certificate-key {{ cert_key }} --apiserver-advertise-address={{ add_kubernetes_cluster_advertise_address }}"


- name: "Join cluster as Manager"
  when: npt (add_kubernetes_cluster_is_manager | default(false))
  block:
    - name: Joining new worker to master
      ansible.builtin.shell: "{{ token_command }} --certificate-key {{ cert_key }} --apiserver-advertise-address={{ add_kubernetes_cluster_advertise_address }}"
